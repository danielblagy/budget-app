// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	log15 "github.com/inconshreveable/log15"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Crit provides a mock function with given fields: msg, ctx
func (_m *Logger) Crit(msg string, ctx ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, ctx...)
	_m.Called(_ca...)
}

// Debug provides a mock function with given fields: msg, ctx
func (_m *Logger) Debug(msg string, ctx ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, ctx...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: msg, ctx
func (_m *Logger) Error(msg string, ctx ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, ctx...)
	_m.Called(_ca...)
}

// GetHandler provides a mock function with given fields:
func (_m *Logger) GetHandler() log15.Handler {
	ret := _m.Called()

	var r0 log15.Handler
	if rf, ok := ret.Get(0).(func() log15.Handler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log15.Handler)
		}
	}

	return r0
}

// Info provides a mock function with given fields: msg, ctx
func (_m *Logger) Info(msg string, ctx ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, ctx...)
	_m.Called(_ca...)
}

// New provides a mock function with given fields: ctx
func (_m *Logger) New(ctx ...interface{}) log15.Logger {
	var _ca []interface{}
	_ca = append(_ca, ctx...)
	ret := _m.Called(_ca...)

	var r0 log15.Logger
	if rf, ok := ret.Get(0).(func(...interface{}) log15.Logger); ok {
		r0 = rf(ctx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log15.Logger)
		}
	}

	return r0
}

// SetHandler provides a mock function with given fields: h
func (_m *Logger) SetHandler(h log15.Handler) {
	_m.Called(h)
}

// Warn provides a mock function with given fields: msg, ctx
func (_m *Logger) Warn(msg string, ctx ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, ctx...)
	_m.Called(_ca...)
}

type mockConstructorTestingTNewLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogger(t mockConstructorTestingTNewLogger) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
