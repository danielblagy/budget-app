// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	db "github.com/danielblagy/budget-app/internal/db"
	mock "github.com/stretchr/testify/mock"

	pgxscan "github.com/georgysavva/scany/v2/pgxscan"
)

// QueryFactory is an autogenerated mock type for the QueryFactory type
type QueryFactory struct {
	mock.Mock
}

// NewCategoriesQuery provides a mock function with given fields: _a0
func (_m *QueryFactory) NewCategoriesQuery(_a0 pgxscan.Querier) db.CategoriesQuery {
	ret := _m.Called(_a0)

	var r0 db.CategoriesQuery
	if rf, ok := ret.Get(0).(func(pgxscan.Querier) db.CategoriesQuery); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.CategoriesQuery)
		}
	}

	return r0
}

// NewEntriesQuery provides a mock function with given fields: _a0
func (_m *QueryFactory) NewEntriesQuery(_a0 pgxscan.Querier) db.EntriesQuery {
	ret := _m.Called(_a0)

	var r0 db.EntriesQuery
	if rf, ok := ret.Get(0).(func(pgxscan.Querier) db.EntriesQuery); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.EntriesQuery)
		}
	}

	return r0
}

type mockConstructorTestingTNewQueryFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueryFactory creates a new instance of QueryFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueryFactory(t mockConstructorTestingTNewQueryFactory) *QueryFactory {
	mock := &QueryFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
