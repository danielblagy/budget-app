// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/danielblagy/budget-app/internal/model"
)

// CategoriesQuery is an autogenerated mock type for the CategoriesQuery type
type CategoriesQuery struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, username, category
func (_m *CategoriesQuery) Add(ctx context.Context, username string, category *model.CreateCategory) (*model.Category, error) {
	ret := _m.Called(ctx, username, category)

	var r0 *model.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.CreateCategory) (*model.Category, error)); ok {
		return rf(ctx, username, category)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.CreateCategory) *model.Category); ok {
		r0 = rf(ctx, username, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *model.CreateCategory) error); ok {
		r1 = rf(ctx, username, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, username, categoryID
func (_m *CategoriesQuery) Delete(ctx context.Context, username string, categoryID int64) (*model.Category, error) {
	ret := _m.Called(ctx, username, categoryID)

	var r0 *model.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (*model.Category, error)); ok {
		return rf(ctx, username, categoryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *model.Category); ok {
		r0 = rf(ctx, username, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, username, categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, username, categoryID
func (_m *CategoriesQuery) Get(ctx context.Context, username string, categoryID int64) (*model.Category, error) {
	ret := _m.Called(ctx, username, categoryID)

	var r0 *model.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (*model.Category, error)); ok {
		return rf(ctx, username, categoryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *model.Category); ok {
		r0 = rf(ctx, username, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, username, categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, username, categoryType
func (_m *CategoriesQuery) GetAll(ctx context.Context, username string, categoryType model.CategoryType) ([]*model.Category, error) {
	ret := _m.Called(ctx, username, categoryType)

	var r0 []*model.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.CategoryType) ([]*model.Category, error)); ok {
		return rf(ctx, username, categoryType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.CategoryType) []*model.Category); ok {
		r0 = rf(ctx, username, categoryType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.CategoryType) error); ok {
		r1 = rf(ctx, username, categoryType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, username, categoryID, newName
func (_m *CategoriesQuery) Update(ctx context.Context, username string, categoryID int64, newName string) (*model.Category, error) {
	ret := _m.Called(ctx, username, categoryID, newName)

	var r0 *model.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, string) (*model.Category, error)); ok {
		return rf(ctx, username, categoryID, newName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, string) *model.Category); ok {
		r0 = rf(ctx, username, categoryID, newName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, string) error); ok {
		r1 = rf(ctx, username, categoryID, newName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCategoriesQuery interface {
	mock.TestingT
	Cleanup(func())
}

// NewCategoriesQuery creates a new instance of CategoriesQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCategoriesQuery(t mockConstructorTestingTNewCategoriesQuery) *CategoriesQuery {
	mock := &CategoriesQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
